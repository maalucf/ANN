from math import *
import numpy as np
import matplotlib.pyplot as plt

def rungeKutta(df, x0, y0, X):

    # Criando listas de coordenadas com as coordenadas iniciais:
    X = [x0] + X
    Y = [y0]
    n = len(X)

    for k in range(1, n):
        h = X[k] - X[k-1]
        m1 = df(X[k-1], Y[k-1])
        m2 = df(X[k-1] + h/2, Y[k-1] + m1*h/2)
        m3 = df(X[k-1] + h/2, Y[k-1] + m2*h/2)
        m4 = df(X[k-1] + h, Y[k-1] + m3*h)
        yk = Y[k-1] + (1/6)*(m1 + 2*m2 + 2*m3 + m4)*h  
        Y.append(yk)
    return X, Y

if __name__ == '__main__':
    

    # Exemplo 01:

    # Constantes:
    t0 = 0
    p0 = 0.00178 
    λ = 0.01667
    μ = 0.00844
    r = 0.18813

    # Número de indivíduos na população no tempo t:
    def dx(x, t):
        return (λ - μ)*x

    # Número de indivíduos rebeldes na população no tempo t:
    def dxn(xn, x, t):
        return (λ - μ)*xn + r*λ*(x - xn)

    # Proporção de rebeldes na população no tempo t:
    def p(xn, x):
        return xn/x

    # Derivada da proporção de rebeldes na população no tempo t:
    def dp(t, p_t):
        return r*λ*(1-p_t)

    # Solução da equação diferencial:
    # 0.00178 = c*exp(0)+1 (WOLFRAM)
    def pt(t):
        return 1 -0.99822*e**(-r*λ*t)
    
    T = [0.52669, 1.0812, 1.69772, 2.41211, 3.02091, 3.67455, 4.57783, 4.84272, 5.83303, 6.52632, 7.2004, 7.7831, 8.34764, 8.92827, 9.42428, 10.40289, 11.06833, 11.53944, 12.2879, 12.97615, 13.9214, 14.35913, 14.90568, 15.41205, 16.36408, 16.91173, 17.86577, 18.1399, 18.78596, 19.60245, 20.36281, 21.08523, 21.47324, 22.41936, 23.11908, 23.92989, 24.57893, 24.92149, 25.44606, 26.59025, 26.93069, 27.66453, 28.47932, 29.09653, 29.63928, 30.42519, 30.81021, 31.90583, 32.40177, 32.8161, 33.74757, 34.23666, 34.91122, 35.91774, 36.54451, 37.12982, 37.55165, 38.40462, 38.8566, 39.41303, 40.4859, 41.20552, 41.64762, 42.49221, 42.88944, 43.48617, 44.20097, 44.90491, 45.61144, 46.33302, 46.76905, 47.85305, 48.3379, 49.0384, 49.73744, 50.44812, 51.17254, 51.82339, 52.16723, 53.14236, 53.46317, 54.27773, 54.88125, 55.7521, 56.58073, 56.95084, 57.4619, 58.43382, 59.23086, 59.49079, 60.31404, 60.76292, 61.74047, 62.40615, 62.88155, 63.42291, 64.57403, 64.74495, 65.77297, 66.10689, 66.7367, 67.51535, 68.50238, 68.90876, 69.77108, 70.29969, 71.18105, 71.77977, 72.12904, 73.2652, 73.41387, 74.4314, 75.12039, 75.87848, 76.55772, 77.08698, 77.41491, 78.27684, 79.2148, 79.89985, 80.26748, 80.99515, 81.75224, 82.26409, 82.89883, 83.61922, 84.47529, 84.78454, 85.50442, 86.58211, 86.85077, 87.91356, 88.56033, 88.82825, 89.40294, 90.09911, 90.93174, 91.82726, 92.31317, 93.25761, 93.67056, 94.22037, 94.85427, 95.60477, 96.31327, 97.21076, 97.57338, 98.5407, 99.16595, 99.42677]


    T, P = rungeKutta(dp, t0, p0, T)

    print(P)

    Erros = []
    for t, pk in zip(T, P):
        erro = abs(pt(t) - pk)
        Erros.append(erro)

    Erros = [0] + Erros
    # Nao colocar o primeiro (provavelmente nao pede o P0)
    for pk, erro in zip(P, Erros):
        print(f"{pk}, {erro},") 
    