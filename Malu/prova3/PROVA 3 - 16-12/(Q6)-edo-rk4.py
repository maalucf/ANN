from math import *
import numpy as np
import matplotlib.pyplot as plt

def rungeKutta(df, x0, y0, X):

    # Criando listas de coordenadas com as coordenadas iniciais:
    X = [x0] + X
    Y = [y0]
    n = len(X)

    for k in range(1, n):
        h = X[k] - X[k-1]
        m1 = df(X[k-1], Y[k-1])
        m2 = df(X[k-1] + h/2, Y[k-1] + m1*h/2)
        m3 = df(X[k-1] + h/2, Y[k-1] + m2*h/2)
        m4 = df(X[k-1] + h, Y[k-1] + m3*h)
        yk = Y[k-1] + (1/6)*(m1 + 2*m2 + 2*m3 + m4)*h  
        Y.append(yk)
    return X, Y

if __name__ == '__main__':
    

    # Exemplo 01:

    # Constantes:
    t0 = 0
    p0 = 0.00175 
    λ = 0.0242
    μ = 0.00772
    r = 0.10857

    # Número de indivíduos na população no tempo t:
    def dx(x, t):
        return (λ - μ)*x

    # Número de indivíduos rebeldes na população no tempo t:
    def dxn(xn, x, t):
        return (λ - μ)*xn + r*λ*(x - xn)

    # Proporção de rebeldes na população no tempo t:
    def p(xn, x):
        return xn/x

    # Derivada da proporção de rebeldes na população no tempo t:
    def dp(t, p_t):
        return r*λ*(1-p_t)

    # Solução da equação diferencial:
    # 0.00175 = c*exp(0)+1 (WOLFRAM)
    def pt(t):
        return 1 -0.99825*e**(-r*λ*t)
    
    T = [0.05386, 0.32805, 0.50359, 0.77673, 0.97523, 1.10381, 1.31463, 1.43552, 1.62258, 1.84795, 2.04496, 2.34684, 2.54528, 2.66495, 2.93205, 3.02911, 3.29865, 3.42577, 3.72246, 3.9368, 4.03742, 4.3673, 4.57902, 4.69303, 4.89893, 5.10403, 5.32478, 5.4309, 5.72002, 5.82141, 6.05763, 6.37631, 6.4507, 6.64567, 6.85104, 7.07274, 7.36685, 7.47692, 7.76595, 7.83299, 8.02644, 8.34594, 8.52464, 8.67391, 8.85644, 9.13348, 9.27334, 9.45876, 9.7284, 9.86408, 10.07567, 10.28986, 10.47857, 10.77446, 10.92849, 11.04238, 11.24502, 11.53205, 11.70192, 11.91851, 12.16873, 12.32619, 12.57274, 12.62788, 12.97875, 13.04148, 13.32896, 13.49219, 13.71299, 13.83632, 14.11284, 14.27157, 14.47871, 14.74236, 14.87398, 15.11624, 15.24385, 15.48197, 15.65684, 15.91516, 16.12175, 16.28521, 16.54582, 16.77017, 16.92892, 17.09388, 17.31877, 17.4328, 17.73396, 17.97624, 18.14623, 18.23232, 18.44352, 18.77843, 18.89039, 19.12642, 19.24713, 19.57184, 19.7711, 19.84938, 20.05189, 20.27263, 20.5352, 20.77803, 20.93613, 21.07676, 21.25239, 21.52494, 21.65802, 21.95896, 22.12441, 22.33563, 22.46808, 22.69144, 22.959, 23.07708, 23.24118, 23.42268, 23.72834, 23.92356, 24.17951, 24.32583, 24.46838, 24.64723, 24.95218, 25.05533, 25.36418, 25.53474, 25.76285, 25.84776, 26.02323, 26.35701, 26.45773, 26.66654, 26.91077, 27.10068, 27.34148, 27.54197, 27.63018, 27.91606, 28.13955, 28.22109, 28.54977, 28.69617, 28.87149, 29.17048, 29.31047, 29.49058, 29.73534, 29.90265, 30.0893, 30.36876, 30.44861, 30.73457, 30.86546, 31.06322, 31.35622, 31.50342, 31.71212, 31.97966, 32.07218, 32.26618, 32.43624, 32.7744, 32.85003, 33.02813, 33.26945, 33.52901, 33.71412, 33.83827, 34.02486, 34.35286, 34.50105, 34.65779, 34.86531, 35.111, 35.26694, 35.44823, 35.70007, 35.92423, 36.06829, 36.23812, 36.43408, 36.70518, 36.87128, 37.08454, 37.27684, 37.54297, 37.71943, 37.92005, 38.13742, 38.24613, 38.47547, 38.66944, 38.92965, 39.17213, 39.23827, 39.45736, 39.63949, 39.84961, 40.03136, 40.25418, 40.46819, 40.73357, 40.9054, 41.16054, 41.37027, 41.43671, 41.75523, 41.94364, 42.12812, 42.37187, 42.43614, 42.63675, 42.88725, 43.14493, 43.33333, 43.5143, 43.67062, 43.91912, 44.1596, 44.34189, 44.50914, 44.68601, 44.92376, 45.10095, 45.279, 45.43391, 45.74158, 45.88381, 46.0204, 46.27137, 46.53243, 46.774, 46.88181, 47.08987, 47.36775, 47.56348, 47.6548, 47.82876, 48.14877, 48.22264, 48.5111, 48.69525, 48.85844, 49.04053, 49.27177, 49.57314, 49.75758, 49.96752, 50.14468, 50.28089, 50.54042, 50.64791, 50.89974, 51.02494, 51.22591, 51.50922, 51.69988, 51.90614, 52.10966, 52.2575, 52.46318, 52.73183, 52.83243, 53.09136, 53.34376, 53.52588, 53.65561, 53.86394, 54.0854, 54.35071, 54.46022, 54.69451, 54.95409, 55.13597, 55.36987, 55.44914, 55.67949, 55.95221, 56.12273, 56.29522, 56.576, 56.65366, 56.89724, 57.16102, 57.29133, 57.48981, 57.67293, 57.8309, 58.15041, 58.30428, 58.57811, 58.63333, 58.90717, 59.10285, 59.31363, 59.43159, 59.71806, 59.83071, 60.17372, 60.282, 60.42403, 60.73508, 60.85589, 61.09611, 61.31371, 61.48247, 61.69792, 61.82196, 62.09616, 62.35637, 62.45478, 62.67442, 62.87822, 63.14413, 63.2844, 63.50034, 63.76405, 63.90703, 64.04555, 64.30889, 64.481, 64.7177, 64.83294, 65.11898, 65.25526, 65.53809, 65.72752, 65.95735, 66.16816, 66.26033, 66.47893, 66.68483, 66.86184, 67.13552, 67.23539, 67.4232, 67.62139, 67.86735, 68.09935, 68.3778, 68.57168, 68.6588, 68.93151, 69.07532, 69.2453, 69.51081, 69.72822, 69.97404, 70.0521, 70.22652, 70.53925, 70.65286, 70.91567, 71.0221, 71.34262, 71.52699, 71.72548, 71.97624, 72.11793, 72.25354, 72.42063, 72.76979, 72.97593, 73.05962, 73.36544, 73.57602, 73.69573, 73.89337, 74.12494, 74.22201, 74.54463, 74.64957, 74.8389, 75.15474, 75.29828, 75.52903, 75.73769, 75.96817, 76.14669, 76.32216, 76.43364, 76.75916, 76.86228, 77.0777, 77.35327, 77.46924, 77.6518, 77.91033, 78.17092, 78.2698, 78.48152, 78.66795, 78.89983, 79.05138, 79.3124, 79.54048, 79.6386, 79.88996, 80.02628, 80.33303, 80.48576, 80.67243, 80.96397, 81.12523, 81.29477, 81.45509, 81.63444, 81.91263, 82.15144, 82.2428, 82.45808, 82.64864, 82.83937, 83.08113, 83.28222, 83.56079, 83.77241, 83.96499, 84.15349, 84.28928, 84.43417, 84.74936, 84.9724, 85.11497, 85.27049, 85.42814, 85.70798, 85.83716, 86.1504, 86.34991, 86.56682, 86.76882, 86.83225, 87.0719, 87.27228, 87.53139, 87.75621, 87.96155, 88.16685, 88.36579, 88.47064, 88.72603, 88.95096, 89.04915, 89.28145, 89.57964, 89.75578, 89.84493, 90.168, 90.27541, 90.49755, 90.69917, 90.92654, 91.15995, 91.35016, 91.42412, 91.74392, 91.94139, 92.10911, 92.27301, 92.44469, 92.67549, 92.90617, 93.15739, 93.32823, 93.52734, 93.76007, 93.95233, 94.08912, 94.29684, 94.45555, 94.64151, 94.90204, 95.13628, 95.32631, 95.56178, 95.67082, 95.90681, 96.16593, 96.27551, 96.56165, 96.76463, 96.92438, 97.06142, 97.31008, 97.44795, 97.69127, 97.91616, 98.03055, 98.25947, 98.4737, 98.62183, 98.86728, 99.13687, 99.233, 99.56928, 99.7097, 99.82349]


    T, P = rungeKutta(dp, t0, p0, T)

    print(P)

    Erros = []
    for t, pk in zip(T, P):
        erro = abs(pt(t) - pk)
        Erros.append(erro)

    Erros = [0] + Erros
    # Nao colocar o primeiro (provavelmente nao pede o P0)
    for pk, erro in zip(P, Erros):
        print(f"{pk}, {erro},") 
    